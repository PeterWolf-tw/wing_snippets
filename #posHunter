import re

posDICT = {"eNum":re.compile(r"<(ENTITY_num)>([^<]+)</\1>"),
           "eCfr":re.compile(r"<(ENTITY_classifier)>([^<]+)</\1>"),
           "eMsr":re.compile(r"<(ENTITY_measurement)>([^<]+)</\1>"),
           "ePsn":re.compile(r"<(ENTITY_person)>([^<]+)</\1>"),
           "ePrn":re.compile(r"<(ENTITY_pronoun)>([^<]+)</\1>"),
           "ePss":re.compile(r"<(ENTITY_possessive)>([^<]+)</\1>"),
           "eNun":re.compile(r"<(ENTITY_oov|ENTITY_noun|ENTITY_nouny|ENTITY_nounHead)>([^<]+)</\1>"),
           "eEng":re.compile(r"<(ENTITY_oov)>\s?([a-zA-Z]+)\s?</\1>"),
           "eDet":re.compile(r"<(ENTITY_DetPhrase)>([^<]+)</\1>"),
           "aLtv":re.compile(r"<(ACTION_lightVerb)>([^<]+)</\1>"),
           "aVrb":re.compile(r"<(ACTION_verb|ACTION_VerbP)>([^<]+)</\1>"),
           "aEvq":re.compile(r"<(ACTION_eventQuantifier)>([^<]+)</\1>"),
           "aQfv":re.compile(r"<(ACTION_quantifiedVerb)>([^<]+)</\1>"),
           "asp" :re.compile(r"<(ASPECT)>([^<]+)</\1>"),
           "aux" :re.compile(r"<(AUX)>([^<]+)</\1>"),
           "mdl" :re.compile(r"<(MODAL)>([^<]+)</\1>"),
           "tme" :re.compile(r"<(TIME_holiday|TIME_justtime|TIME_day|TIME_week|TIME_month|TIME_season|TIME_year|TIME_decade)>([^<]+)</\1>"),
           "mdf" :re.compile(r"<(DegreeP|IDIOM|MODIFIER|ModifierP|QUANTIFIER)>([^<]+)</\1>"),
           "mClr":re.compile(r"<(MODIFIER_color)>([^<]+)</\1>"),
           "fCnj":re.compile(r"<(FUNC_conjunction)>([^<]+)</\1>"),
           "fDgh":re.compile(r"<(FUNC_degreeHead)>([^<]+)</\1>"),
           "fDet":re.compile(r"<(FUNC_determiner)>([^<]+)</\1>"),
           "fInn":re.compile(r"<(FUNC_inner)>([^<]+)</\1>"),
           "fItr":re.compile(r"<(FUNC_inter)>([^<]+)</\1>"),
           "fMdh":re.compile(r"<(FUNC_modifierHead)>([^<]+)</\1>"),
           "fNeg":re.compile(r"<(FUNC_negation)>([^<]+)</\1>"),
           "cAna":re.compile(r"<(CLAUSE_AnotAQ)>([^<]+)</\1>"),
           "cYno":re.compile(r"<(CLAUSE_YesNoQ)>([^<]+)</\1>"),
           "cWho":re.compile(r"<(CLAUSE_WhoQ)>([^<]+)</\1\>"),
           "cWat":re.compile(r"<(CLAUSE_WhatQ)>([^<]+)</\1>"),
           "cWhr":re.compile(r"<(CLAUSE_WhereQ)>([^<]+)</\1>"),
           "cWhn":re.compile(r"<(CLAUSE_WhenQ)>([^<]+)</\1>"),
           "cWhy":re.compile(r"<(CLAUSE_WhyQ)>([^<]+)</\1>"),
           "cHow":re.compile(r"<(CLAUSE_HowQ)>([^<]+)</\1>"),
           "cPrc":re.compile(r"<(CLAUSE_particle)>([^<]+)</\1>"),
           "loc" :re.compile(r"<(LOCATION)>([^<]+)</\1>"),
           "rLoc":re.compile(r"<(RANGE_locality)>([^<]+)</\1>"),
           "rPrd":re.compile(r"<(RANGE_period)>([^<]+)</\1>"),
           "udf" :re.compile(r"<(UserDefined)>([^<]+)</\1>"),
           "kAdd":re.compile(r"<(KNOWLEDGE_addTW)>([^<]+)</\1>"),
           "kCry":re.compile(r"<(KNOWLEDGE_currency)>([^<]+)</\1>"),
           "kLaw":re.compile(r"<(KNOWLEDGE_lawTW)>([^<]+)</\1>"),
           "kPlc":re.compile(r"<(KNOWLEDGE_place)>([^<]+)</\1>"),
           "kRut":re.compile(r"<(KNOWLEDGE_routeTW)>([^<]+)</\1>"),
           "kUrl":re.compile(r"<(KNOWLEDGE_url)>([^<]+)</\1>"),
           "kWkd":re.compile(r"<(KNOWLEDGE_wikiData)>([^<]+)</\1>"),
           "kCml":re.compile(r"<(KNOWLEDGE_chemical)>([^<]+)</\1>"),
           }

def posHunter(posSTR, inputSTR):
    posPAT = posDICT[posSTR]
    resultLIST = [(i.start(), i.group(2)) for i in posPAT.finditer(inputSTR)]
    return (posSTR, resultLIST)